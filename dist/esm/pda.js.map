{"version":3,"file":"pda.js","sourceRoot":"","sources":["../../src/pda.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,oBAAoB,EAAE,MAAM,kBAAkB,CAAC;AACxD,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAC5C,OAAO,EACH,iBAAiB,EACjB,iBAAiB,EACjB,gBAAgB,EAChB,qBAAqB,EACrB,iBAAiB,GACpB,MAAM,aAAa,CAAC;AAErB,MAAM,UAAU,YAAY,CAAC,SAAiB;IAC1C,SAAS,GAAG,SAAS,CAAC,WAAW,EAAE,CAAC;IACpC,OAAO,SAAS,CAAC,sBAAsB,CACnC,CAAC,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,EAAE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,EACvD,oBAAoB,CACvB,CAAC;AACN,CAAC;AAED,MAAM,UAAU,aAAa,CAAC,QAAmB;IAC7C,OAAO,SAAS,CAAC,sBAAsB,CACnC,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,EAAE,QAAQ,CAAC,QAAQ,EAAE,CAAC,EACrD,qBAAqB,CACxB,CAAC;AACN,CAAC;AAED,MAAM,UAAU,cAAc,CAC1B,WAAsB,EACtB,gBAA2B;IAE3B,OAAO,SAAS,CAAC,sBAAsB,CACnC;QACI,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC;QAC9B,gBAAgB,CAAC,QAAQ,EAAE;QAC3B,WAAW,CAAC,QAAQ,EAAE;KACzB,EACD,qBAAqB,CACxB,CAAC;AACN,CAAC;AAED,MAAM,UAAU,kBAAkB,CAAC,QAAmB;IAClD,OAAO,SAAS,CAAC,sBAAsB,CACnC,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,EAAE,QAAQ,CAAC,QAAQ,EAAE,CAAC,EACrD,qBAAqB,CACxB,CAAC;AACN,CAAC","sourcesContent":["import { TLD_HOUSE_PROGRAM_ID } from '@onsol/tldparser';\nimport { PublicKey } from '@solana/web3.js';\nimport {\n    NAME_HOUSE_PREFIX,\n    NFT_RECORD_PREFIX,\n    TLD_HOUSE_PREFIX,\n    NAME_HOUSE_PROGRAM_ID,\n    COLLECTION_PREFIX,\n} from './constants';\n\nexport function findTldHouse(tldString: string) {\n    tldString = tldString.toLowerCase();\n    return PublicKey.findProgramAddressSync(\n        [Buffer.from(TLD_HOUSE_PREFIX), Buffer.from(tldString)],\n        TLD_HOUSE_PROGRAM_ID,\n    );\n}\n\nexport function findNameHouse(tldHouse: PublicKey) {\n    return PublicKey.findProgramAddressSync(\n        [Buffer.from(NAME_HOUSE_PREFIX), tldHouse.toBuffer()],\n        NAME_HOUSE_PROGRAM_ID,\n    );\n}\n\nexport function findNameRecord(\n    nameAccount: PublicKey,\n    nameHouseAccount: PublicKey,\n) {\n    return PublicKey.findProgramAddressSync(\n        [\n            Buffer.from(NFT_RECORD_PREFIX),\n            nameHouseAccount.toBuffer(),\n            nameAccount.toBuffer(),\n        ],\n        NAME_HOUSE_PROGRAM_ID,\n    );\n}\n\nexport function findCollectionMint(tldHouse: PublicKey) {\n    return PublicKey.findProgramAddressSync(\n        [Buffer.from(COLLECTION_PREFIX), tldHouse.toBuffer()],\n        NAME_HOUSE_PROGRAM_ID,\n    );\n}\n"]}