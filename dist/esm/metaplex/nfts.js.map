{"version":3,"file":"nfts.js","sourceRoot":"","sources":["../../../src/metaplex/nfts.ts"],"names":[],"mappings":"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","sourcesContent":["import { Connection, PublicKey } from '@solana/web3.js';\nimport { SPL_TOKEN_PROGRAM_ID } from '../constants';\nimport axios from 'axios';\n\nconst getMetadataDatas = async (\n    nftAddresses: string[],\n    heliusApiKey: string,\n) => {\n    const url = `https://api.helius.xyz/v0/tokens/metadata?api-key=${heliusApiKey}`;\n    if (nftAddresses.length > 100) {\n        const axiosRequests: any[] = [];\n\n        while (nftAddresses.length > 0)\n            axiosRequests.push(\n                axios.post(url, { mintAccounts: nftAddresses.splice(0, 100) }),\n            );\n\n        return await axios.all(axiosRequests).then(responses => {\n            const metadata = {\n                data: [],\n            };\n            for (const response of responses) {\n                metadata.data = metadata.data.concat(response.data);\n            }\n            console.log(metadata);\n            return metadata;\n        });\n    } else {\n        return await axios.post(url, { mintAccounts: nftAddresses });\n    }\n};\n\nexport const getParsedNftAccountsByOwner = async (\n    connection: Connection,\n    owner: PublicKey,\n    heliusApiKey: string,\n) => {\n    const { value: splAccounts } =\n        await connection.getParsedTokenAccountsByOwner(owner, {\n            programId: SPL_TOKEN_PROGRAM_ID,\n        });\n\n    const nftAccounts = splAccounts\n        .filter(t => {\n            const amount = t.account?.data?.parsed?.info?.tokenAmount?.uiAmount;\n            const decimals =\n                t.account?.data?.parsed?.info?.tokenAmount?.decimals;\n            return decimals === 0 && amount >= 1;\n        })\n        .map(t => {\n            const address = t.account?.data?.parsed?.info?.mint;\n            return address;\n        });\n\n    const ownerNfts = await getMetadataDatas(nftAccounts, heliusApiKey);\n\n    return ownerNfts?.data;\n};\n\nexport type OnsolTokenType = {\n    mintAddress: PublicKey;\n    amount: string | number;\n};\n\nexport const getParsedTokenAccountsByOwner = async (\n    owner: PublicKey,\n    connection: Connection,\n): Promise<OnsolTokenType[]> => {\n    const { value: splAccounts } =\n        await connection.getParsedTokenAccountsByOwner(owner, {\n            programId: SPL_TOKEN_PROGRAM_ID,\n        });\n\n    const nftAccounts = splAccounts\n        .filter(t => {\n            const amount = t.account?.data?.parsed?.info?.tokenAmount?.uiAmount;\n            const decimals =\n                t.account?.data?.parsed?.info?.tokenAmount?.decimals;\n            return decimals === 0 && amount >= 1;\n        })\n        .map(t => {\n            const mintAddress = t.account?.data?.parsed?.info?.mint;\n            const amount = t.account?.data?.parsed?.info?.tokenAmount?.uiAmount;\n            return { mintAddress, amount };\n        });\n\n    return nftAccounts;\n};\n"]}