{"version":3,"file":"nft_record.js","sourceRoot":"","sources":["../../../src/types/nft_record.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * This code was GENERATED using the solita package.\n * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.\n *\n * See: https://github.com/metaplex-foundation/solita\n */\n\nimport * as beet from '@metaplex-foundation/beet';\nimport * as beetSolana from '@metaplex-foundation/beet-solana';\nimport * as web3 from '@solana/web3.js';\n\nimport { Tag, tagBeet } from './tag';\n\n/**\n * Arguments used to create {@link NftRecord}\n * @category Accounts\n * @category generated\n */\nexport type NftRecordArgs = {\n    tag: Tag;\n    bump: number;\n    nameAccount: web3.PublicKey;\n    owner: web3.PublicKey;\n    nftMintAccount: web3.PublicKey;\n    tldHouse: web3.PublicKey;\n};\n\nexport const nftRecordDiscriminator = [174, 190, 114, 100, 177, 14, 90, 254];\n/**\n * Holds the data for the {@link NftRecord} Account and provides de/serialization\n * functionality for that data\n *\n * @category Accounts\n * @category generated\n */\nexport class NftRecord implements NftRecordArgs {\n    private constructor(\n        readonly tag: Tag,\n        readonly bump: number,\n        readonly nameAccount: web3.PublicKey,\n        readonly owner: web3.PublicKey,\n        readonly nftMintAccount: web3.PublicKey,\n        readonly tldHouse: web3.PublicKey,\n    ) {}\n\n    /**\n     * Creates a {@link NftRecord} instance from the provided args.\n     */\n    static fromArgs(args: NftRecordArgs) {\n        return new NftRecord(\n            args.tag,\n            args.bump,\n            args.nameAccount,\n            args.owner,\n            args.nftMintAccount,\n            args.tldHouse,\n        );\n    }\n\n    /**\n     * Deserializes the {@link NftRecord} from the data of the provided {@link web3.AccountInfo}.\n     * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.\n     */\n    static fromAccountInfo(\n        accountInfo: web3.AccountInfo<Buffer>,\n        offset = 0,\n    ): [NftRecord, number] {\n        return NftRecord.deserialize(accountInfo.data, offset);\n    }\n\n    /**\n     * Retrieves the account info from the provided address and deserializes\n     * the {@link NftRecord} from its data.\n     *\n     * @throws Error if no account info is found at the address or if deserialization fails\n     */\n    static async fromAccountAddress(\n        connection: web3.Connection,\n        address: web3.PublicKey,\n    ): Promise<NftRecord> {\n        const accountInfo = await connection.getAccountInfo(address);\n        if (accountInfo == null) {\n            throw new Error(`Unable to find NftRecord account at ${address}`);\n        }\n        return NftRecord.fromAccountInfo(accountInfo, 0)[0];\n    }\n\n    /**\n     * Deserializes the {@link NftRecord} from the provided data Buffer.\n     * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.\n     */\n    static deserialize(buf: Buffer, offset = 0): [NftRecord, number] {\n        return nftRecordBeet.deserialize(buf, offset);\n    }\n\n    /**\n     * Serializes the {@link NftRecord} into a Buffer.\n     * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.\n     */\n    serialize(): [Buffer, number] {\n        return nftRecordBeet.serialize({\n            accountDiscriminator: nftRecordDiscriminator,\n            ...this,\n        });\n    }\n\n    /**\n     * Returns the byteSize of a {@link Buffer} holding the serialized data of\n     * {@link NftRecord}\n     */\n    static get byteSize() {\n        return nftRecordBeet.byteSize;\n    }\n\n    /**\n     * Fetches the minimum balance needed to exempt an account holding\n     * {@link NftRecord} data from rent\n     *\n     * @param connection used to retrieve the rent exemption information\n     */\n    static async getMinimumBalanceForRentExemption(\n        connection: web3.Connection,\n        commitment?: web3.Commitment,\n    ): Promise<number> {\n        return connection.getMinimumBalanceForRentExemption(\n            NftRecord.byteSize,\n            commitment,\n        );\n    }\n\n    /**\n     * Determines if the provided {@link Buffer} has the correct byte size to\n     * hold {@link NftRecord} data.\n     */\n    static hasCorrectByteSize(buf: Buffer, offset = 0) {\n        return buf.byteLength - offset === NftRecord.byteSize;\n    }\n\n    /**\n     * Returns a readable version of {@link NftRecord} properties\n     * and can be used to convert to JSON and/or logging\n     */\n    pretty() {\n        return {\n            tag: 'Tag.' + Tag[this.tag],\n            bump: this.bump,\n            nameAccount: this.nameAccount.toBase58(),\n            owner: this.owner.toBase58(),\n            nftMintAccount: this.nftMintAccount.toBase58(),\n            tldHouse: this.tldHouse.toBase58(),\n        };\n    }\n}\n\n/**\n * @category Accounts\n * @category generated\n */\nexport const nftRecordBeet = new beet.BeetStruct<\n    NftRecord,\n    NftRecordArgs & {\n        accountDiscriminator: number[] /* size: 8 */;\n    }\n>(\n    [\n        ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],\n        ['tag', tagBeet],\n        ['bump', beet.u8],\n        ['nameAccount', beetSolana.publicKey],\n        ['owner', beetSolana.publicKey],\n        ['nftMintAccount', beetSolana.publicKey],\n        ['tldHouse', beetSolana.publicKey],\n    ],\n    NftRecord.fromArgs,\n    'NftRecord',\n);\n"]}