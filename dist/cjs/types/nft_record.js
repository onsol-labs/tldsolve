'use strict';
/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
var __createBinding =
    (this && this.__createBinding) ||
    (Object.create
        ? function (o, m, k, k2) {
              if (k2 === undefined) k2 = k;
              var desc = Object.getOwnPropertyDescriptor(m, k);
              if (
                  !desc ||
                  ('get' in desc
                      ? !m.__esModule
                      : desc.writable || desc.configurable)
              ) {
                  desc = {
                      enumerable: true,
                      get: function () {
                          return m[k];
                      },
                  };
              }
              Object.defineProperty(o, k2, desc);
          }
        : function (o, m, k, k2) {
              if (k2 === undefined) k2 = k;
              o[k2] = m[k];
          });
var __setModuleDefault =
    (this && this.__setModuleDefault) ||
    (Object.create
        ? function (o, v) {
              Object.defineProperty(o, 'default', {
                  enumerable: true,
                  value: v,
              });
          }
        : function (o, v) {
              o['default'] = v;
          });
var __importStar =
    (this && this.__importStar) ||
    function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (
                    k !== 'default' &&
                    Object.prototype.hasOwnProperty.call(mod, k)
                )
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    };
var __awaiter =
    (this && this.__awaiter) ||
    function (thisArg, _arguments, P, generator) {
        function adopt(value) {
            return value instanceof P
                ? value
                : new P(function (resolve) {
                      resolve(value);
                  });
        }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) {
                try {
                    step(generator.next(value));
                } catch (e) {
                    reject(e);
                }
            }
            function rejected(value) {
                try {
                    step(generator['throw'](value));
                } catch (e) {
                    reject(e);
                }
            }
            function step(result) {
                result.done
                    ? resolve(result.value)
                    : adopt(result.value).then(fulfilled, rejected);
            }
            step(
                (generator = generator.apply(thisArg, _arguments || [])).next(),
            );
        });
    };
Object.defineProperty(exports, '__esModule', { value: true });
exports.nftRecordBeet =
    exports.NftRecord =
    exports.nftRecordDiscriminator =
        void 0;
const beet = __importStar(require('@metaplex-foundation/beet'));
const beetSolana = __importStar(require('@metaplex-foundation/beet-solana'));
const tag_1 = require('./tag');
exports.nftRecordDiscriminator = [174, 190, 114, 100, 177, 14, 90, 254];
/**
 * Holds the data for the {@link NftRecord} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
class NftRecord {
    constructor(tag, bump, nameAccount, owner, nftMintAccount, tldHouse) {
        this.tag = tag;
        this.bump = bump;
        this.nameAccount = nameAccount;
        this.owner = owner;
        this.nftMintAccount = nftMintAccount;
        this.tldHouse = tldHouse;
    }
    /**
     * Creates a {@link NftRecord} instance from the provided args.
     */
    static fromArgs(args) {
        return new NftRecord(
            args.tag,
            args.bump,
            args.nameAccount,
            args.owner,
            args.nftMintAccount,
            args.tldHouse,
        );
    }
    /**
     * Deserializes the {@link NftRecord} from the data of the provided {@link web3.AccountInfo}.
     * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
     */
    static fromAccountInfo(accountInfo, offset = 0) {
        return NftRecord.deserialize(accountInfo.data, offset);
    }
    /**
     * Retrieves the account info from the provided address and deserializes
     * the {@link NftRecord} from its data.
     *
     * @throws Error if no account info is found at the address or if deserialization fails
     */
    static fromAccountAddress(connection, address) {
        return __awaiter(this, void 0, void 0, function* () {
            const accountInfo = yield connection.getAccountInfo(address);
            if (accountInfo == null) {
                throw new Error(
                    `Unable to find NftRecord account at ${address}`,
                );
            }
            return NftRecord.fromAccountInfo(accountInfo, 0)[0];
        });
    }
    /**
     * Deserializes the {@link NftRecord} from the provided data Buffer.
     * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
     */
    static deserialize(buf, offset = 0) {
        return exports.nftRecordBeet.deserialize(buf, offset);
    }
    /**
     * Serializes the {@link NftRecord} into a Buffer.
     * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
     */
    serialize() {
        return exports.nftRecordBeet.serialize(
            Object.assign(
                { accountDiscriminator: exports.nftRecordDiscriminator },
                this,
            ),
        );
    }
    /**
     * Returns the byteSize of a {@link Buffer} holding the serialized data of
     * {@link NftRecord}
     */
    static get byteSize() {
        return exports.nftRecordBeet.byteSize;
    }
    /**
     * Fetches the minimum balance needed to exempt an account holding
     * {@link NftRecord} data from rent
     *
     * @param connection used to retrieve the rent exemption information
     */
    static getMinimumBalanceForRentExemption(connection, commitment) {
        return __awaiter(this, void 0, void 0, function* () {
            return connection.getMinimumBalanceForRentExemption(
                NftRecord.byteSize,
                commitment,
            );
        });
    }
    /**
     * Determines if the provided {@link Buffer} has the correct byte size to
     * hold {@link NftRecord} data.
     */
    static hasCorrectByteSize(buf, offset = 0) {
        return buf.byteLength - offset === NftRecord.byteSize;
    }
    /**
     * Returns a readable version of {@link NftRecord} properties
     * and can be used to convert to JSON and/or logging
     */
    pretty() {
        return {
            tag: 'Tag.' + tag_1.Tag[this.tag],
            bump: this.bump,
            nameAccount: this.nameAccount.toBase58(),
            owner: this.owner.toBase58(),
            nftMintAccount: this.nftMintAccount.toBase58(),
            tldHouse: this.tldHouse.toBase58(),
        };
    }
}
exports.NftRecord = NftRecord;
/**
 * @category Accounts
 * @category generated
 */
exports.nftRecordBeet = new beet.BeetStruct(
    [
        ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
        ['tag', tag_1.tagBeet],
        ['bump', beet.u8],
        ['nameAccount', beetSolana.publicKey],
        ['owner', beetSolana.publicKey],
        ['nftMintAccount', beetSolana.publicKey],
        ['tldHouse', beetSolana.publicKey],
    ],
    NftRecord.fromArgs,
    'NftRecord',
);
//# sourceMappingURL=nft_record.js.map
