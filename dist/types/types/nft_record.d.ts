/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
/// <reference types="node" />
import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
import { Tag } from './tag';
/**
 * Arguments used to create {@link NftRecord}
 * @category Accounts
 * @category generated
 */
export type NftRecordArgs = {
    tag: Tag;
    bump: number;
    nameAccount: web3.PublicKey;
    owner: web3.PublicKey;
    nftMintAccount: web3.PublicKey;
    tldHouse: web3.PublicKey;
};
export declare const nftRecordDiscriminator: number[];
/**
 * Holds the data for the {@link NftRecord} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export declare class NftRecord implements NftRecordArgs {
    readonly tag: Tag;
    readonly bump: number;
    readonly nameAccount: web3.PublicKey;
    readonly owner: web3.PublicKey;
    readonly nftMintAccount: web3.PublicKey;
    readonly tldHouse: web3.PublicKey;
    private constructor();
    /**
     * Creates a {@link NftRecord} instance from the provided args.
     */
    static fromArgs(args: NftRecordArgs): NftRecord;
    /**
     * Deserializes the {@link NftRecord} from the data of the provided {@link web3.AccountInfo}.
     * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
     */
    static fromAccountInfo(
        accountInfo: web3.AccountInfo<Buffer>,
        offset?: number,
    ): [NftRecord, number];
    /**
     * Retrieves the account info from the provided address and deserializes
     * the {@link NftRecord} from its data.
     *
     * @throws Error if no account info is found at the address or if deserialization fails
     */
    static fromAccountAddress(
        connection: web3.Connection,
        address: web3.PublicKey,
    ): Promise<NftRecord>;
    /**
     * Deserializes the {@link NftRecord} from the provided data Buffer.
     * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
     */
    static deserialize(buf: Buffer, offset?: number): [NftRecord, number];
    /**
     * Serializes the {@link NftRecord} into a Buffer.
     * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
     */
    serialize(): [Buffer, number];
    /**
     * Returns the byteSize of a {@link Buffer} holding the serialized data of
     * {@link NftRecord}
     */
    static get byteSize(): number;
    /**
     * Fetches the minimum balance needed to exempt an account holding
     * {@link NftRecord} data from rent
     *
     * @param connection used to retrieve the rent exemption information
     */
    static getMinimumBalanceForRentExemption(
        connection: web3.Connection,
        commitment?: web3.Commitment,
    ): Promise<number>;
    /**
     * Determines if the provided {@link Buffer} has the correct byte size to
     * hold {@link NftRecord} data.
     */
    static hasCorrectByteSize(buf: Buffer, offset?: number): boolean;
    /**
     * Returns a readable version of {@link NftRecord} properties
     * and can be used to convert to JSON and/or logging
     */
    pretty(): {
        tag: string;
        bump: number;
        nameAccount: string;
        owner: string;
        nftMintAccount: string;
        tldHouse: string;
    };
}
/**
 * @category Accounts
 * @category generated
 */
export declare const nftRecordBeet: beet.BeetStruct<
    NftRecord,
    NftRecordArgs & {
        accountDiscriminator: number[];
    }
>;
//# sourceMappingURL=nft_record.d.ts.map
